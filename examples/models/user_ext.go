package models

// Code generated by ksql.
// Do'nt Edit!!!
// Do'nt Edit!!!
// Do'nt Edit!!!
// 用户扩展信息
// from database: test_dev
// table:         user_ext
// orm version:   1.0.1
// created time:  2025-01-13 14:04:37
/**
Table DDL:
CREATE TABLE `user_ext` (
  `id` int NOT NULL COMMENT '用户ID',
  `prev_login_date` date NOT NULL DEFAULT '1970-01-01' COMMENT '上次登录日期',
  `prev_login_time` timestamp NULL DEFAULT NULL COMMENT '上次登录时间',
  `prev_login_ip` varchar(45) NOT NULL DEFAULT '' COMMENT '上次登录IP',
  `update_time` bigint NOT NULL DEFAULT '0' COMMENT '更新时间',
  `create_time` varchar(45) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `idx_pref` (`prev_login_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='用户扩展信息'
*/

import (
	"context"

	"github.com/kovey/db-go/v3"
	"github.com/kovey/db-go/v3/model"
	"time"
)

const (
	Table_UserExt               = "user_ext"        // 用户扩展信息
	Table_UserExt_Id            = "id"              // 用户ID
	Table_UserExt_PrevLoginDate = "prev_login_date" // 上次登录日期
	Table_UserExt_PrevLoginTime = "prev_login_time" // 上次登录时间
	Table_UserExt_PrevLoginIp   = "prev_login_ip"   // 上次登录IP
	Table_UserExt_UpdateTime    = "update_time"     // 更新时间
	Table_UserExt_CreateTime    = "create_time"     //
)

type UserExt struct {
	*model.Model  `db:"-" json:"-"` // model
	Id            int               `db:"id" json:"id"`                           // 用户ID
	PrevLoginDate time.Time         `db:"prev_login_date" json:"prev_login_date"` // 上次登录日期
	PrevLoginTime *time.Time        `db:"prev_login_time" json:"prev_login_time"` // 上次登录时间
	PrevLoginIp   string            `db:"prev_login_ip" json:"prev_login_ip"`     // 上次登录IP
	UpdateTime    int64             `db:"update_time" json:"update_time"`         // 更新时间
	CreateTime    string            `db:"create_time" json:"create_time"`         //
}

func NewUserExt() *UserExt {
	return &UserExt{Model: model.NewModel(Table_UserExt, "id", model.Type_Int)}
}

func (self *UserExt) Save(ctx context.Context) error {
	return self.Model.Save(ctx, self)
}

func (self *UserExt) Clone() ksql.RowInterface {
	return NewUserExt()
}

func (self *UserExt) Values() []any {
	return []any{&self.Id, &self.PrevLoginDate, &self.PrevLoginTime, &self.PrevLoginIp, &self.UpdateTime, &self.CreateTime}
}

func (self *UserExt) Columns() []string {
	return []string{Table_UserExt_Id, Table_UserExt_PrevLoginDate, Table_UserExt_PrevLoginTime, Table_UserExt_PrevLoginIp, Table_UserExt_UpdateTime, Table_UserExt_CreateTime}
}

func (self *UserExt) Delete(ctx context.Context) error {
	return self.Model.Delete(ctx, self)
}

func (self *UserExt) Query() ksql.BuilderInterface[*UserExt] {
	return model.Row(self)
}
