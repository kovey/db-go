package models

// Code generated by orm.
// Do'nt Edit!!!
// Do'nt Edit!!!
// Do'nt Edit!!!
// 用户表
// table: user
// orm version: 0.0.1
// created time: 2024-10-25 23:37:59

import (
	"context"

	"github.com/kovey/db-go/v3"
	"github.com/kovey/db-go/v3/model"
	"time"
)

type User struct {
	*model.Model  `db:"-" json:"-"` // model
	Account       string            `db:"account" json:"account"`                 // 账号
	Avatar        string            `db:"avatar" json:"avatar"`                   // 头像
	BanExpireTime int64             `db:"ban_expire_time" json:"ban_expire_time"` // 封禁到期时间
	BanType       int               `db:"ban_type" json:"ban_type"`               // 封禁类型 0 - 永久 1 - 临时 2 - 正常
	CreateDate    time.Time         `db:"create_date" json:"create_date"`         // 创建日期
	CreateTime    int64             `db:"create_time" json:"create_time"`         // 创建时间
	Email         string            `db:"email" json:"email"`                     // 邮件
	Id            int64             `db:"id" json:"id"`                           // 主键
	Mobile        string            `db:"mobile" json:"mobile"`                   // 手机号
	Nickname      string            `db:"nickname" json:"nickname"`               // 昵称
	OpenId        string            `db:"open_id" json:"open_id"`                 // 对外ID
	Password      string            `db:"password" json:"password"`               // 密码
	Status        int               `db:"status" json:"status"`                   // 状态 0 - 正常 1 - 封禁
	UpdateTime    int64             `db:"update_time" json:"update_time"`         // 更新时间
}

func NewUser() *User {
	return &User{Model: model.NewModel("user", "id", model.Type_Int)}
}

func (self *User) Save(ctx context.Context) error {
	return self.Model.Save(ctx, self)
}

func (self *User) Clone() ksql.RowInterface {
	return NewUser()
}

func (self *User) Values() []any {
	return []any{&self.Account, &self.Avatar, &self.BanExpireTime, &self.BanType, &self.CreateDate, &self.CreateTime, &self.Email, &self.Id, &self.Mobile, &self.Nickname, &self.OpenId, &self.Password, &self.Status, &self.UpdateTime}
}

func (self *User) Columns() []string {
	return []string{"account", "avatar", "ban_expire_time", "ban_type", "create_date", "create_time", "email", "id", "mobile", "nickname", "open_id", "password", "status", "update_time"}
}

func (self *User) Delete(ctx context.Context) error {
	return self.Model.Delete(ctx, self)
}
