package tpl

const (
	Table_Sharding = `package {package_name}

// Code generated by orm. 
// DO NOT EDIT!!!
// DO NOT EDIT!!!
// DO NOT EDIT!!!
// Orm version: {orm_version}
// Database: {database}
// Table: {table_name} {table_comment}
// Created time: {created_date}

import(
	"context"

	"github.com/kovey/db-go/v2/sql/meta"
	"github.com/kovey/db-go/v2/sql"
	"github.com/kovey/db-go/v2/model"
	"github.com/kovey/db-go/v2/table"
	"github.com/kovey/db-go/v2/sharding"
	"github.com/kovey/db-go/v2/itf"
	"github.com/kovey/pool"
	"github.com/kovey/pool/object"
{imports}
)

const (
	Table_{name} = "{table_name}" {table_comment}
{column_const}
)

func init() {
	pool.DefaultNoCtx("ko.tables.{package_name}", "{name}Table", func() any {
		return &{name}Table{ObjNoCtx: object.NewObjNoCtx("ko.tables.{package_name}", "{name}Table"), TableSharding: table.NewTableSharding[*{name}Row](Table_{name})}
	})
	pool.DefaultNoCtx("ko.tables.{package_name}", "{name}Row", func() any {
		return &{name}Row{ObjNoCtx: object.NewObjNoCtx("ko.tables.{package_name}", "{name}Row")}
	})
}

{table_comment}
type {name}Table struct {
	*object.ObjNoCtx
	*table.TableSharding[*{name}Row]
}

func New{name}Table(isMaster bool) *{name}Table {
	return &{name}Table{TableSharding: table.NewTableShardingBy[*{name}Row](Table_{name}, isMaster)}
}

func New{name}TableBy(ctx object.CtxInterface, isMaster bool) *{name}Table {
	obj := ctx.GetNoCtx("ko.tables.{package_name}", "{name}Table").(*{name}Table)
	obj.Set(isMaster, sharding.NewTxBy(ctx))
	return obj
}

func (self *{name}Table) Reset() {
	self.Set(false, nil)
}

func (self *{name}Table) FetchAll(key any, where meta.Where) ([]*{name}Row, error) {
	return self.TableSharding.FetchAll(key, where, &{name}Row{})
}

func (self *{name}Table) FetchAllByWhere(key any, where sql.WhereInterface) ([]*{name}Row, error) {
	return self.TableSharding.FetchAllByWhere(key, where, &{name}Row{})
}

func (self *{name}Table) FetchPage(key any, where meta.Where, page, pageSize int, orders ...string) (*meta.Page[*{name}Row], error) {
	return self.TableSharding.FetchPage(key, where, &{name}Row{}, page, pageSize, orders...)
}

func (self *{name}Table) FetchPageByWhere(key any, where sql.WhereInterface, page, pageSize int, orders ...string) (*meta.Page[*{name}Row], error) {
	return self.TableSharding.FetchPageByWhere(key, where, &{name}Row{}, page, pageSize, orders...)
}

func (self *{name}Table) FetchAllCtx(ctx context.Context, key any, where meta.Where) ([]*{name}Row, error) {
	return self.TableSharding.FetchAllCtx(ctx, key, where, &{name}Row{})
}

func (self *{name}Table) FetchAllByWhereCtx(ctx context.Context, key any, where sql.WhereInterface) ([]*{name}Row, error) {
	return self.TableSharding.FetchAllByWhereCtx(ctx, key, where, &{name}Row{})
}

func (self *{name}Table) FetchPageCtx(ctx context.Context, key any, where meta.Where, page, pageSize int, orders ...string) (*meta.Page[*{name}Row], error) {
	return self.TableSharding.FetchPageCtx(ctx, key, where, &{name}Row{}, page, pageSize, orders...)
}

func (self *{name}Table) FetchPageByWhereCtx(ctx context.Context, key any, where sql.WhereInterface, page, pageSize int, orders ...string) (*meta.Page[*{name}Row], error) {
	return self.TableSharding.FetchPageByWhereCtx(ctx, key, where, &{name}Row{}, page, pageSize, orders...)
}

{table_comment}
type {name}Row struct {
	*object.ObjNoCtx
	*model.BaseSharding[*{name}Row]
	isMaster bool
{row_fields}
}

func New{name}Row(isMaster bool) *{name}Row {
	self := &{name}Row{BaseSharding: model.NewBaseSharding[*{name}Row](New{name}Table(isMaster), model.NewPrimaryId({primary_id}, model.{primary_id_type})), isMaster: isMaster}
	{close_auto_inc}
	return self
}

func New{name}RowBy(ctx object.CtxInterface, isMaster bool) *{name}Row {
	self := ctx.GetNoCtx("ko.tables.{package_name}", "{name}Row").(*{name}Row)
	if self.BaseSharding == nil {
		self.BaseSharding = model.NewBaseSharding[*{name}Row](New{name}TableBy(ctx, isMaster), nil)
	}
	if self.BaseSharding.Table == nil {
		self.BaseSharding.Table = New{name}TableBy(ctx, isMaster)
	}
	self.BaseSharding.SetPrimaryId(model.NewPrimaryIdBy(ctx, {primary_id}, model.{primary_id_type}))
	self.isMaster = isMaster
	{close_auto_inc}
	return self
}

func (self *{name}Row) Reset() {
	self.BaseSharding.Reset()
	self.isMaster = false
{row_fields_reset}
}

func (self *{name}Row) Clone(ctx object.CtxInterface) itf.RowInterface {
	if ctx == nil {
		return New{name}Row(self.isMaster)
	}

	return New{name}RowBy(ctx, self.isMaster)
}

func (self *{name}Row) Columns() []string {
	return []string{
{func_columns}
	}
}

func (self *{name}Row) Fields() []any {
	return []any{
{func_fields}
	}
}

func (self *{name}Row) Values() []any {
	return []any{
{func_values}
	}
}

func (self *{name}Row) Save(key any) error {
	return self.BaseSharding.Save(key, self)
}

func (self *{name}Row) FindByInt(key any, id int64) error {
	return self.FetchRow(key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) FindByIntCtx(ctx context.Context, key any, id int64) error {
	return self.FetchRowCtx(ctx, key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) FindByString(key any, id string) error {
	return self.FetchRow(key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) FindByStringCtx(ctx context.Context, key any, id string) error {
	return self.FetchRowCtx(ctx, key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) FetchRow(key any, where meta.Where) error {
	return self.BaseSharding.FetchRow(key, where, self)
}

func (self *{name}Row) LockByInt(key any, id int64) error {
	return self.LockRow(key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) LockByIntCtx(ctx context.Context, key any, id int64) error {
	return self.LockRowCtx(ctx, key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) LockByString(key any, id string) error {
	return self.LockRow(key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) LockByStringCtx(ctx context.Context, key any, id string) error {
	return self.LockRowCtx(ctx, key, meta.Where{self.PrimaryId(): id})
}

func (self *{name}Row) LockRow(key any, where meta.Where) error {
	return self.BaseSharding.LockRow(key, where, self)
}

func (self *{name}Row) Delete(key any) error {
	return self.BaseSharding.Delete(key, self)
}

func (self *{name}Row) SaveCtx(ctx context.Context, key any) error {
	return self.BaseSharding.SaveCtx(ctx, key, self)
}

func (self *{name}Row) FetchRowCtx(ctx context.Context, key any, where meta.Where) error {
	return self.BaseSharding.FetchRowCtx(ctx, key, where, self)
}

func (self *{name}Row) LockRowCtx(ctx context.Context, key any, where meta.Where) error {
	return self.BaseSharding.LockRowCtx(ctx, key, where, self)
}

func (self *{name}Row) DeleteCtx(ctx context.Context, key any) error {
	return self.BaseSharding.DeleteCtx(ctx, key, self)
}
	`
)
