package tpl

const (
	Table = `package {package_name}

// Code generated by orm. 
// DO NOT EDIT!!!
// DO NOT EDIT!!!
// DO NOT EDIT!!!
// Orm version: {orm_version}
// Database: {database}
// Table: {table_name} {table_comment}
// Created time: {created_date}

import(
	"github.com/kovey/db-go/v2/sql/meta"
	"github.com/kovey/db-go/v2/model"
	"github.com/kovey/db-go/v2/table"
	"github.com/kovey/db-go/v2/itf"
{imports}
)

const (
	Table_{name} = "{table_name}" {table_comment}
{column_const}
)

{table_comment}
type {name}Table struct {
	*table.Table[*{name}Row]
}

func New{name}Table() *{name}Table {
	return &{name}Table{Table: table.NewTable[*{name}Row](Table_{name})}
}

{table_comment}
type {name}Row struct {
	*model.Base[*{name}Row]
{row_fields}
}

func New{name}Row() *{name}Row {
	self := &{name}Row{Base: model.NewBase[*{name}Row](New{name}Table(), model.NewPrimaryId({primary_id}, model.{primary_id_type}))}
	{close_auto_inc}
	return self
}

func (self *{name}Row) Clone() itf.RowInterface {
	return &{name}Row{}
}

func (self *{name}Row) Columns() []string {
	return []string{
{func_columns}
	}
}

func (self *{name}Row) Fields() []any {
	return []any{
{func_fields}
	}
}

func (self *{name}Row) Values() []any {
	return []any{
{func_values}
	}
}

func (self *{name}Row) Save() error {
	return self.Base.Save(self)
}

func (self *{name}Row) FetchRow(where meta.Where) error {
	return self.Base.FetchRow(where, self)
}

func (self *{name}Row) LockRow(where meta.Where) error {
	return self.Base.LockRow(where, self)
}

func (self *{name}Row) Delete() error {
	return self.Base.Delete(self)
}
	`
	Field = "	%s %s `db:\"%s\"` %s"

	Decimal        = `	"github.com/shopspring/decimal"`
	Sql            = `	"database/sql"`
	Meta_Column    = `		%s,`
	Meta_Fields    = `		&self.%s,`
	Meta_Values    = `		self.%s,`
	Close_Auto_Inc = "self.NoAutoInc()"
)
